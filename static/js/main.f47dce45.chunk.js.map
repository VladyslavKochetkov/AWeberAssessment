{"version":3,"sources":["state/reducers/snackbar.ts","state/reducers/rootReducer.ts","state/store.ts","component/Snackbar.tsx","component/config.tsx","reportWebVitals.ts","main/Error404/index.tsx","component/InputValidationToggle.tsx","Validators/Password.ts","main/StrictlyCompliant/LeftSide.tsx","main/Landing/index.tsx","main/StrictlyCompliant/index.tsx","Router.tsx","index.tsx"],"names":["initialState","anchorOrigin","horizontal","vertical","message","autoHideDuration","alertSeverity","refreshToken","snackbarSlice","createSlice","name","reducers","alert","_","payload","Math","random","actions","rootReducer","combineReducers","snackbar","persistedReducer","persistReducer","key","storage","blacklist","immutableInvariantMiddleware","createImmutableStateInvariantMiddleware","ignoredPaths","store","configureStore","reducer","middleware","getDefaultMiddleware","concat","devTools","persistor","persistStore","GlobalSnackBar","useSelector","state","useState","open","setOpen","useEffect","timeout","setTimeout","clearTimeout","Snackbar","omit","Alert","severity","theme","createMuiTheme","Config","children","StrictMode","CssBaseline","ThemeProvider","loading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","useStyles","makeStyles","background","backgroundImage","height","width","textShadow","Error404","classes","className","clsx","Box","to","Button","variant","color","size","root","outlinedPrimary","InputValidationToggle","props","wrapper","toggled","icon","label","PasswordValidator","password","updatePassword","meetsLengthRequirements","length","meetsUpperCaseRequirements","test","meetsLowerCaseRequirements","meetsNumericRequirements","meetsSpecialCharacterRequirements","isValidPassword","this","LeftSide","Landing","React","passwordValue","setPasswordValue","confirmationPasswordValue","setConfirmationPasswordValue","passwordValidator","current","src","TextField","fullWidth","onChange","event","value","target","type","Tooltip","title","arrow","Info","disabled","StrictlyCompliant","dispatch","useDispatch","onClick","Router","path","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f47dce45.chunk.js","sourcesContent":["import { SnackbarProps } from \"@material-ui/core\";\nimport { AlertProps } from \"@material-ui/lab\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface SnackbarState extends SnackbarProps {\n  alertSeverity: AlertProps[\"severity\"] | null;\n  message?: string | null;\n  refreshToken: number;\n}\n\nconst initialState: SnackbarState = {\n  anchorOrigin: { horizontal: \"center\", vertical: \"top\" },\n  message: null,\n  autoHideDuration: 5000,\n  alertSeverity: \"success\",\n  refreshToken: -1,\n};\n\nconst snackbarSlice = createSlice({\n  name: \"snackbar\",\n  initialState,\n  reducers: {\n    alert: (_, { payload }: PayloadAction<Omit<Partial<SnackbarState>, \"refreshToken\">>) => {\n      return { ...initialState, ...payload, refreshToken: Math.random() };\n    },\n  },\n});\n\nexport default snackbarSlice.reducer;\nexport const { alert } = snackbarSlice.actions;\n","import { combineReducers } from \"redux\";\nimport snackbar from \"./snackbar\";\nconst rootReducer = combineReducers({ snackbar });\nexport default rootReducer;\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { Action, configureStore, createImmutableStateInvariantMiddleware, ThunkAction } from \"@reduxjs/toolkit\";\nimport rootReducer, { RootState } from \"./reducers/rootReducer\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\n\nconst persistedReducer = persistReducer(\n  {\n    key: \"vlad-boiler\",\n    storage,\n    blacklist: [\"snackbar\"],\n  },\n  rootReducer,\n);\n\nconst immutableInvariantMiddleware = createImmutableStateInvariantMiddleware({\n  ignoredPaths: [],\n});\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat([immutableInvariantMiddleware]),\n  devTools: true,\n});\n\nexport const persistor = persistStore(store);\n\nif (process.env.NODE_ENV !== \"production\" && module.hot) {\n  module.hot.accept(\"./reducers/rootReducer\", () => store.replaceReducer(persistedReducer));\n}\n\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\n","import React, { useEffect, useState } from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../state/reducers/rootReducer\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { omit } from \"lodash\";\n\nconst GlobalSnackBar: React.FC = () => {\n  const snackbar = useSelector((state: RootState) => state.snackbar);\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    setOpen(!!snackbar.message);\n\n    const timeout = setTimeout(() => setOpen(false), snackbar.autoHideDuration || 5000);\n\n    return () => clearTimeout(timeout);\n  }, [snackbar.message, snackbar.refreshToken]);\n\n  return (\n    <div>\n      <Snackbar {...omit(snackbar, \"message\", \"alert\")} open={open}>\n        {snackbar.alertSeverity === null ? (\n          <>{snackbar.message}</>\n        ) : (\n          <Alert severity={snackbar.alertSeverity}>{snackbar.message}</Alert>\n        )}\n      </Snackbar>\n    </div>\n  );\n};\n\nexport default GlobalSnackBar;\n","import { createMuiTheme, CssBaseline, ThemeProvider } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { persistor, store } from \"../state/store\";\nimport GlobalSnackBar from \"./Snackbar\";\n\nif (process.env.NODE_ENV === \"development\") {\n  document.getElementById(\"root\")?.classList.add(\"debug-screens\");\n}\n\nconst theme = createMuiTheme();\n\nconst Config: React.FC = ({ children }) => (\n  <React.StrictMode>\n    <CssBaseline />\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <PersistGate loading={null} persistor={persistor}>\n          <GlobalSnackBar />\n          {children}\n        </PersistGate>\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>\n);\n\nexport default Config;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as React from \"react\";\nimport { Box, Button, makeStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles({\n  background: {\n    backgroundImage: `url(\"https://images.unsplash.com/photo-1505765050516-f72dcac9c60e?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2550&q=80\")`,\n    height: \"100vh\",\n    width: \"100vw\",\n  },\n  textShadow: {\n    textShadow: \"#0f0f0fb5 2px 4px 8px\",\n  },\n});\n\nconst Error404: React.FC = () => {\n  const classes = useStyles();\n  return (\n    <div>\n      <div className={clsx(\"bg-cover filter blur-sm contrast-125\", classes.background)} />\n      <div className=\"absolute top-0 left-0 w-full h-full flex items-center justify-center flex-col gap-3\">\n        <Box className={clsx(\"text-7xl text-white font-medium\", classes.textShadow)}>404 - Page Not Found</Box>\n        <Box className={clsx(\"text-3xl text-white\", classes.textShadow)}>\n          The page you're looking for doesn't exist.\n        </Box>\n        <Link to=\"/AWeberAssessment/\">\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            size=\"large\"\n            classes={{\n              root: \"text-white\",\n              outlinedPrimary: \"border-white\",\n            }}\n          >\n            Take me back home\n          </Button>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default Error404;\n","import { Box } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport * as React from \"react\";\n\ninterface IInputValidationToggleProps {\n  toggled: boolean;\n  label: string;\n  classes?: {\n    label?: string;\n    icon?: string;\n    wrapper?: string;\n  };\n}\n\nconst CheckIcon = \"✔\";\nconst XIcon = \"✘\";\n\nconst InputValidationToggle: React.FunctionComponent<IInputValidationToggleProps> = (props) => {\n  return (\n    <div className={clsx(\"flex gap-2 items-center\", props.classes?.wrapper)}>\n      <Box\n        className={clsx(\n          \"text-xl text-yellow-700 transition-colors duration-500 ease-in-out\",\n          props.toggled && \"text-green-600\",\n          props.classes?.icon,\n        )}\n      >\n        {props.toggled ? CheckIcon : XIcon}\n      </Box>\n      <Box className={clsx(\"text-base\")}>{props.label}</Box>\n    </div>\n  );\n};\n\nexport default InputValidationToggle;\n","export class PasswordValidator {\n  private password: string;\n  constructor(password: string) {\n    this.password = password;\n  }\n\n  updatePassword = (password: string): void => {\n    this.password = password;\n  };\n\n  meetsLengthRequirements = (): boolean => this.password.length >= 6;\n  meetsUpperCaseRequirements = (): boolean => /[A-Z]/.test(this.password);\n  meetsLowerCaseRequirements = (): boolean => /[a-z]/.test(this.password);\n  meetsNumericRequirements = (): boolean => /\\d/.test(this.password);\n  meetsSpecialCharacterRequirements = (): boolean => /[@!#$%^&*()_\\-+={[}\\]\\|:;\"'<,>.]/.test(this.password);\n\n  isValidPassword = (): boolean =>\n    this.meetsLengthRequirements() &&\n    this.meetsUpperCaseRequirements() &&\n    this.meetsLowerCaseRequirements() &&\n    this.meetsNumericRequirements() &&\n    this.meetsSpecialCharacterRequirements();\n}\n","import { Box, makeStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport * as React from \"react\";\n\nconst useStyles = makeStyles(() => ({\n  background: {\n    backgroundImage: `url(\"https://images.unsplash.com/photo-1557683304-673a23048d34?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=843&q=80\")`,\n  },\n}));\n\nconst LeftSide: React.FC = (props) => {\n  const classes = useStyles();\n  return (\n    <div\n      className={clsx(\"bg-blue-500 flex-2 bg-cover justify-center px-10 flex flex-col text-white\", classes.background)}\n    >\n      <Box className=\"text-5xl font-medium\">Vladyslav Kochetkov</Box>\n      <Box className=\"text-2xl\">Technical assessment for AWeber</Box>\n      {props.children}\n      <div className=\"border-t border-white my-4 opacity-50\"></div>\n      <Box className=\"text-2xl\">Technologies Used</Box>\n      <Box className=\"text-lg\">\n        <ul className=\"list-disc list-inside\">\n          <li>React - Create React App</li>\n          <li>TypeScript</li>\n          <li>React Router DOM</li>\n          <li>Redux</li>\n          <li>TailwindCSS</li>\n          <li>clsx - className formatting</li>\n          <li>Material UI</li>\n          <li>Lodash - Single instance</li>\n          <li>Prettier</li>\n          <li>ESLint</li>\n          <li>Husky - Git hooks</li>\n        </ul>\n      </Box>\n    </div>\n  );\n};\n\nexport default LeftSide;\n","import { Box, Button, TextField, Tooltip } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport InputValidationToggle from \"../../component/InputValidationToggle\";\nimport { PasswordValidator } from \"../../Validators/Password\";\nimport { Info } from \"@material-ui/icons\";\nimport { Link } from \"react-router-dom\";\nimport LeftSide from \"../StrictlyCompliant/LeftSide\";\n\nconst Landing: React.FC = () => {\n  const [passwordValue, setPasswordValue] = React.useState(\"\");\n  const [confirmationPasswordValue, setConfirmationPasswordValue] = React.useState(\"\");\n  const passwordValidator = React.useRef(new PasswordValidator(passwordValue)).current;\n  return (\n    <div className=\"w-full flex\">\n      <LeftSide>\n        <Box className=\"text-lg mt-4\">\n          This submission deviates from the assignment slightly. Instead of validating the inputs after the user clicks\n          submit, the submit button is disabled until all of the mandatory criteria are met.\n        </Box>\n        <div className=\"mt-2\">\n          <Link to=\"/AWeberAssessment/strictlyCompliant\">\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              classes={{\n                root: \"text-white\",\n                outlinedPrimary: \"border-white\",\n              }}\n            >\n              View Strictly Compliant Version\n            </Button>\n          </Link>\n        </div>\n      </LeftSide>\n      <div className=\"flex-3 flex items-center justify-center flex-col\">\n        <div className=\"flex items-center gap-2\">\n          <img src=\"/AWeberAssessment/logo192.png\" height={50} width={50} />\n          <div className=\"mt-2\">\n            <Box className=\"font-medium text-3xl leading-4\">AWeber</Box>\n            <Box className=\"text-xl\">Assessment</Box>\n          </div>\n        </div>\n        <Box className=\"text-2xl my-5\">Password Validation System</Box>\n        <div className=\"flex w-full flex-col gap-2 max-w-xs\">\n          <TextField\n            variant=\"outlined\"\n            label=\"Password\"\n            fullWidth\n            onChange={(event) => {\n              const { value } = event.target;\n              setPasswordValue(value);\n              passwordValidator.updatePassword(value);\n            }}\n            type=\"password\"\n          />\n          <TextField\n            variant=\"outlined\"\n            label=\"Password Confirmation\"\n            fullWidth\n            type=\"password\"\n            onChange={(event) => {\n              setConfirmationPasswordValue(event.target.value);\n            }}\n          />\n        </div>\n        <div className=\"flex w-full flex-col gap-2 max-w-sm mt-2 items-center\">\n          <div>\n            <InputValidationToggle\n              toggled={passwordValue === confirmationPasswordValue && passwordValue !== \"\"}\n              label=\"Passwords must match\"\n            />\n            <InputValidationToggle\n              toggled={passwordValidator.meetsLengthRequirements()}\n              label=\"Must be at least 6 characters long\"\n            />\n            <InputValidationToggle\n              toggled={passwordValidator.meetsUpperCaseRequirements()}\n              label=\"Must have at least 1 uppercase character\"\n            />\n            <InputValidationToggle\n              toggled={passwordValidator.meetsLowerCaseRequirements()}\n              label=\"Must have at least 1 lowercase character\"\n            />\n            <InputValidationToggle\n              toggled={passwordValidator.meetsNumericRequirements()}\n              label=\"Must have at least 1 number\"\n            />\n            <div className=\"flex items-center\">\n              <InputValidationToggle\n                toggled={passwordValidator.meetsSpecialCharacterRequirements()}\n                label=\"Must have at least 1 special character\"\n              />\n              <div className=\"ml-2\">\n                <Tooltip\n                  title={\n                    <>\n                      <Box className=\"text-base\">Allowed Special Characters:</Box>\n                      <Box className=\"text-base\">{`!@#$%^&*()_-+={[}]|:;\"'<,>`}</Box>\n                    </>\n                  }\n                  arrow\n                >\n                  <Info className=\"opacity-75\" />\n                </Tooltip>\n              </div>\n            </div>\n          </div>\n        </div>{\" \"}\n        <div className=\"flex w-full max-w-xs\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            fullWidth\n            className=\"mt-2\"\n            disabled={!passwordValidator.isValidPassword() || passwordValue !== confirmationPasswordValue}\n          >\n            Submit\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Landing;\n","import { Box, Button, TextField } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport { PasswordValidator } from \"../../Validators/Password\";\nimport { useDispatch } from \"react-redux\";\nimport { alert } from \"../../state/reducers/snackbar\";\nimport { Link } from \"react-router-dom\";\nimport LeftSide from \"./LeftSide\";\n\nconst StrictlyCompliant: React.FC = () => {\n  const dispatch = useDispatch();\n  const [passwordValue, setPasswordValue] = React.useState(\"\");\n  const [confirmationPasswordValue, setConfirmationPasswordValue] = React.useState(\"\");\n  const passwordValidator = React.useRef(new PasswordValidator(passwordValue)).current;\n  return (\n    <div className=\"w-full flex\">\n      <LeftSide>\n        <Box className=\"text-lg mt-4\">\n          This submission tries to be strictly compliant with the assignment request. There is another alternative\n          version that use live auto-validation.\n        </Box>\n        <div className=\"mt-2\">\n          <Link to=\"/AWeberAssessment/\">\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              classes={{\n                root: \"text-white\",\n                outlinedPrimary: \"border-white\",\n              }}\n            >\n              View Live Validation Version\n            </Button>\n          </Link>\n        </div>\n      </LeftSide>\n      <div className=\"flex-3 flex items-center justify-center flex-col\">\n        <div className=\"flex items-center gap-2\">\n          <img src=\"/AWeberAssessment/logo192.png\" height={50} width={50} />\n          <div className=\"mt-2\">\n            <Box className=\"font-medium text-3xl leading-4\">AWeber</Box>\n            <Box className=\"text-xl\">Assessment</Box>\n          </div>\n        </div>\n        <Box className=\"text-2xl my-5\">Password Validation System</Box>\n        <div className=\"flex w-full flex-col gap-2 max-w-xs\">\n          <TextField\n            variant=\"outlined\"\n            label=\"Password\"\n            fullWidth\n            onChange={(event) => {\n              const { value } = event.target;\n              setPasswordValue(value);\n              passwordValidator.updatePassword(value);\n            }}\n            type=\"password\"\n          />\n          <TextField\n            variant=\"outlined\"\n            label=\"Password Confirmation\"\n            fullWidth\n            type=\"password\"\n            onChange={(event) => {\n              setConfirmationPasswordValue(event.target.value);\n            }}\n          />\n        </div>\n        <div className=\"flex w-full max-w-xs\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            fullWidth\n            className=\"mt-2\"\n            onClick={() => {\n              if (!passwordValidator.meetsLengthRequirements()) {\n                return dispatch(\n                  alert({ message: \"Password must be at least 6 characters long\", alertSeverity: \"error\" }),\n                );\n              }\n\n              if (!passwordValidator.meetsLowerCaseRequirements()) {\n                return dispatch(\n                  alert({ message: \"Password must contain at least 1 lowercase character\", alertSeverity: \"error\" }),\n                );\n              }\n\n              if (!passwordValidator.meetsUpperCaseRequirements()) {\n                return dispatch(\n                  alert({ message: \"Password must contain at least 1 uppercase character\", alertSeverity: \"error\" }),\n                );\n              }\n\n              if (!passwordValidator.meetsNumericRequirements()) {\n                return dispatch(alert({ message: \"Password must contain at least 1 number\", alertSeverity: \"error\" }));\n              }\n\n              if (!passwordValidator.meetsSpecialCharacterRequirements()) {\n                return dispatch(\n                  alert({\n                    message:\n                      \"Password must contain at least 1 special character - Allowed special characters !@#$%^&*()_-+={[}]|:;\\\"'<,>.\",\n                    alertSeverity: \"error\",\n                  }),\n                );\n              }\n\n              if (passwordValue !== confirmationPasswordValue) {\n                return dispatch(alert({ message: \"Passwords do not match\", alertSeverity: \"error\" }));\n              }\n\n              dispatch(alert({ message: \"Passwords are valid!\" }));\n            }}\n          >\n            Submit\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default StrictlyCompliant;\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Error404 from \"./main/Error404\";\nimport Landing from \"./main/Landing\";\nimport StrictlyCompliant from \"./main/StrictlyCompliant\";\n\nconst Router: React.FC = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route path=\"/AWeberAssessment/\" exact>\n        <Landing />\n      </Route>\n      <Route path=\"/AWeberAssessment/strictlyCompliant\">\n        <StrictlyCompliant />\n      </Route>\n      <Route path=\"*\">\n        <Error404 />\n      </Route>\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Config from \"./component/config\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Router from \"./Router\";\nimport \"./tailwind.css\";\n\nReactDOM.render(\n  <Config>\n    <Router />\n  </Config>,\n  document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}